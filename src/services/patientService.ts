import { supabase } from '@/integrations/supabase/client';
import { Patient } from '@/types/patient';
import { processPatientData, preparePatientForInsert, preparePatientForUpdate } from '@/utils/patientUtils';

export const fetchPatients = async (userId: string): Promise<Patient[]> => {
  console.log('üîç DEBUG: fetchPatients - Iniciando busca de pacientes');
  console.log('üë§ DEBUG: fetchPatients - User ID:', userId);
  
  try {
    // Verificar se o usu√°rio est√° autenticado antes de fazer a requisi√ß√£o
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.log('‚ùå DEBUG: fetchPatients - Usu√°rio n√£o autenticado:', authError);
      return [];
    }
    
    const { data, error } = await supabase
      .from('patients')
      .select('*')
      .eq('user_id', userId)
      .order('nome', { ascending: true });
    
    if (error) {
      console.error('‚ùå DEBUG: fetchPatients - Erro do Supabase:', error);
      console.error('‚ùå DEBUG: fetchPatients - Error code:', error.code);
      console.error('‚ùå DEBUG: fetchPatients - Error message:', error.message);
      
      // Se for erro de rede, retornar array vazio sem throw
      if (error.message?.includes('Failed to fetch') || error.message?.includes('fetch')) {
        console.log('üåê DEBUG: fetchPatients - Erro de rede detectado, retornando array vazio');
        return [];
      }
      
      throw error;
    }
    
    console.log('üìä DEBUG: fetchPatients - Dados brutos retornados:', data);
    console.log('üìä DEBUG: fetchPatients - Quantidade de registros:', data?.length || 0);
    
    if (!data || data.length === 0) {
      console.log('‚ÑπÔ∏è DEBUG: fetchPatients - Nenhum paciente encontrado para este usu√°rio');
      return [];
    }
    
    const processedPatients = data.map(processPatientData);
    console.log('‚úÖ DEBUG: fetchPatients - Pacientes processados:', processedPatients);
    
    return processedPatients;
  } catch (error) {
    console.error('‚ùå DEBUG: fetchPatients - Erro na opera√ß√£o:', error);
    
    // Para erros de rede, n√£o fazer throw para evitar erro cont√≠nuo
    if (error instanceof Error && error.message?.includes('Failed to fetch')) {
      console.log('üåê DEBUG: fetchPatients - Tratando erro de rede graciosamente');
      return [];
    }
    
    throw error;
  }
};

export const insertPatient = async (patientData: Omit<Patient, 'id' | 'idade' | 'ultimaConsulta'>, userId: string): Promise<Patient> => {
  console.log('üöÄ DEBUG: insertPatient - Iniciando inser√ß√£o de paciente');
  console.log('üìù DEBUG: insertPatient - Dados recebidos:', patientData);
  console.log('üë§ DEBUG: insertPatient - User ID:', userId);
  
  try {
    // Verificar se o usu√°rio est√° autenticado no Supabase
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError) {
      console.error('‚ùå DEBUG: insertPatient - Erro de autentica√ß√£o:', authError);
      throw new Error('Erro de autentica√ß√£o: ' + authError.message);
    }
    
    if (!user) {
      console.error('‚ùå DEBUG: insertPatient - Usu√°rio n√£o autenticado no Supabase');
      throw new Error('Usu√°rio n√£o autenticado');
    }
    
    console.log('‚úÖ DEBUG: insertPatient - Usu√°rio autenticado no Supabase:', user.id);
    console.log('üìß DEBUG: insertPatient - Email do usu√°rio:', user.email);
    
    // Verificar se o userId passado corresponde ao usu√°rio autenticado
    if (user.id !== userId) {
      console.error('‚ùå DEBUG: insertPatient - ID do usu√°rio n√£o confere');
      console.log('üìä DEBUG: insertPatient - User ID from auth:', user.id);
      console.log('üìä DEBUG: insertPatient - User ID passed:', userId);
      throw new Error('ID do usu√°rio n√£o confere com o usu√°rio autenticado');
    }
    
    const insertData = preparePatientForInsert(patientData, userId);
    console.log('üìã DEBUG: insertPatient - Dados preparados para inser√ß√£o:', insertData);
    
    // Verificar se j√° existe paciente com o mesmo CPF para este usu√°rio
    console.log('üîç DEBUG: insertPatient - Verificando CPF duplicado...');
    const { data: existingPatient, error: checkError } = await supabase
      .from('patients')
      .select('id, cpf')
      .eq('user_id', userId)
      .eq('cpf', insertData.cpf)
      .single();
    
    if (checkError && checkError.code !== 'PGRST116') { // PGRST116 = no rows found
      console.error('‚ùå DEBUG: insertPatient - Erro ao verificar CPF:', checkError);
      throw checkError;
    }
    
    if (existingPatient) {
      console.error('‚ùå DEBUG: insertPatient - CPF j√° existe:', existingPatient);
      throw new Error('J√° existe um paciente cadastrado com este CPF');
    }
    
    console.log('‚úÖ DEBUG: insertPatient - CPF dispon√≠vel, prosseguindo com inser√ß√£o...');
    
    const { data, error } = await supabase
      .from('patients')
      .insert([insertData])
      .select()
      .single();
    
    if (error) {
      console.error('‚ùå DEBUG: insertPatient - Erro do Supabase na inser√ß√£o:', error);
      console.error('‚ùå DEBUG: insertPatient - Error code:', error.code);
      console.error('‚ùå DEBUG: insertPatient - Error message:', error.message);
      console.error('‚ùå DEBUG: insertPatient - Error details:', error.details);
      console.error('‚ùå DEBUG: insertPatient - Error hint:', error.hint);
      
      // Traduzir erros comuns
      if (error.code === '23505') {
        throw new Error('J√° existe um paciente com este CPF');
      }
      
      if (error.message.includes('violates row-level security')) {
        throw new Error('Erro de permiss√£o: n√£o √© poss√≠vel salvar o paciente');
      }
      
      throw error;
    }
    
    if (!data) {
      console.error('‚ùå DEBUG: insertPatient - Nenhum dado retornado ap√≥s inser√ß√£o');
      throw new Error('Falha na inser√ß√£o: nenhum dado retornado');
    }
    
    console.log('üéâ DEBUG: insertPatient - Paciente inserido com sucesso:', data);
    const processedPatient = processPatientData(data);
    console.log('‚úÖ DEBUG: insertPatient - Paciente processado:', processedPatient);
    
    return processedPatient;
  } catch (error) {
    console.error('‚ùå DEBUG: insertPatient - Erro geral na opera√ß√£o:', error);
    throw error;
  }
};

export const fetchPatientById = async (id: string, userId: string): Promise<Patient | null> => {
  const { data, error } = await supabase
    .from('patients')
    .select('*')
    .eq('id', id)
    .eq('user_id', userId)
    .single();
  
  if (error) throw error;
  if (!data) return null;
  
  return processPatientData(data);
};

export const updatePatientById = async (id: string, patientData: Partial<Patient>, userId: string): Promise<Patient> => {
  console.log('Atualizando paciente:', id, patientData);
  
  const dataToUpdate = preparePatientForUpdate(patientData);
  
  const { data, error } = await supabase
    .from('patients')
    .update(dataToUpdate)
    .eq('id', id)
    .eq('user_id', userId)
    .select()
    .single();
  
  if (error) {
    console.error('Erro do Supabase ao atualizar paciente:', error);
    throw error;
  }
  
  console.log('Paciente atualizado com sucesso:', data);
  return processPatientData(data);
};

export const removePatient = async (id: string, userId: string): Promise<void> => {
  console.log('Excluindo paciente:', id);
  
  const { error } = await supabase
    .from('patients')
    .delete()
    .eq('id', id)
    .eq('user_id', userId);
  
  if (error) {
    console.error('Erro do Supabase ao excluir paciente:', error);
    throw error;
  }
  
  console.log('Paciente exclu√≠do com sucesso');
};

export const removeAllPatients = async (userId: string): Promise<void> => {
  console.log('Excluindo todos os pacientes para usu√°rio:', userId);
  
  const { error } = await supabase
    .from('patients')
    .delete()
    .eq('user_id', userId);
  
  if (error) {
    console.error('Erro do Supabase ao excluir todos os pacientes:', error);
    throw error;
  }
  
  console.log('Todos os pacientes foram exclu√≠dos com sucesso');
};
